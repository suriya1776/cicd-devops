name: Main CICD
run-name: Running the CICD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  modified_microservices:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.extract.outputs.services }}
      dotnet_services: ${{ steps.detect_lang.outputs.dotnet_services }}
      java_services: ${{ steps.detect_lang.outputs.java_services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect changed microservices
        id: filter
        uses: dorny/paths-filter@v2
        with:
          list-files: json
          filters: |
            any_changed:
              - 'src/**'

      - name: Debug: Show changed files
        run: echo "Changed Files: ${{ steps.filter.outputs.any_changed_files }}"

      - name: Extract Microservice Names
        id: extract
        run: |
          FILES_JSON='${{ steps.filter.outputs.any_changed_files }}'
          SERVICES=$(echo "$FILES_JSON" | jq -r '[.[] | capture("src/(?<service>[^/]+)/.*") | .service] | unique | join(",")')
          
          if [ -z "$SERVICES" ]; then
            echo "No microservices changed. Skipping build."
            echo "::set-output name=services::"
            exit 0
          fi
          
          echo "Changed Services: $SERVICES"
          echo "::set-output name=services::$SERVICES"
        shell: bash

      - name: Detect if .NET or Java code changed
        id: detect_lang
        run: |
          DOTNET_SERVICES=""
          JAVA_SERVICES=""

          for service in $(echo ${{ steps.extract.outputs.services }} | tr ',' ' '); do
            if find src/$service -type f \( -name "*.csproj" -o -name "*.sln" \) | grep -q .; then
              DOTNET_SERVICES+="$service,"
            fi
            if find src/$service -type f \( -name "*.java" -o -name "pom.xml" -o -name "build.gradle" \) | grep -q .; then
              JAVA_SERVICES+="$service,"
            fi
          done

          DOTNET_SERVICES=${DOTNET_SERVICES%,}
          JAVA_SERVICES=${JAVA_SERVICES%,}

          echo "Dotnet Services: $DOTNET_SERVICES"
          echo "Java Services: $JAVA_SERVICES"

          echo "::set-output name=dotnet_services::$DOTNET_SERVICES"
          echo "::set-output name=java_services::$JAVA_SERVICES"
        shell: bash

  build-and-push:
    needs: modified_microservices
    runs-on: ubuntu-latest
    if: ${{ needs.modified_microservices.outputs.changed_services != '' && needs.modified_microservices.outputs.changed_services != null }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug: Show changed services
        run: |
          echo "Changed Services: ${{ needs.modified_microservices.outputs.changed_services }}"
          echo "Dotnet Services: ${{ needs.modified_microservices.outputs.dotnet_services }}"
          echo "Java Services: ${{ needs.modified_microservices.outputs.java_services }}"

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Changed Microservices
        run: |
          for service in $(echo ${{ needs.modified_microservices.outputs.changed_services }} | tr ',' ' '); do
            IMAGE_NAME="ghcr.io/${{ github.repository }}/$service:latest"

            # Determine Build Context and Dockerfile Path
            if [[ ",${{ needs.modified_microservices.outputs.dotnet_services }}," == *",$service,"* ]]; then
              BUILD_CONTEXT="."
              DOCKERFILE="src/$service/Dockerfile"
            else
              BUILD_CONTEXT="src/$service"
              DOCKERFILE="src/$service/Dockerfile"
            fi

            echo "Building and pushing $IMAGE_NAME with context: $BUILD_CONTEXT"

            docker build -t $IMAGE_NAME -f $DOCKERFILE $BUILD_CONTEXT
            docker push $IMAGE_NAME
          done
        shell: bash
